#include "fft.h"
#include "complex.h"
#include "trig.h"



void fillInBuffers(int samples) {
	static float sinValues[samples/2];
	static float cosValues[samples/2];

	int half_samples = samples/2;
	sinValues[0] = sine(0);
	cosValues[0] = cosine(0);
	for (int i = 1; i <= half_samples; i++) {
		sinValues[i] = sine(-PI * i / half_samples);
		cosValues[i] = cosine(-PI * i / half_samples);
		float fValue = sinValues[i];
		int fValueWhole, fValueThousandths;

		fValueWhole = fValue;
		fValueThousandths = (fValue - fValueWhole) * 1000;

		//xil_printf("sinValues[%d] = %d.%3d\r\n", i ,fValueWhole, fValueThousandths);
	}
}

float fft(float* q, float* w, int n, int m, float sample_f) {
	int a, b, r, d, e, c;
	int k, place;
	a = n / 2;
	b = 1;
	int half_n = a;
	int i, j;
	float real = 0, imagine = 0;
	float max, frequency;
	float cos_val;
	float sin_val;
	float new_[n];
	float new_im[n];


	// ORdering algorithm
	for (i = 0; i < (m - 1); i++) {
		d = 0;
		for (j = 0; j < b; j++) {
			for (c = 0; c < a; c++) {
				e = c + d;
				new_[e] = q[(c * 2) + d];
				new_im[e] = w[(c * 2) + d];
				new_[e + a] = q[2 * c + 1 + d];
				new_im[e + a] = w[2 * c + 1 + d];
			}
			d += (n / b);
		}
		for (r = 0; r < n; r++) {
			q[r] = new_[r];
			w[r] = new_im[r];
		}
		b *= 2;
		a = n / (2 * b);
	}
	//end ordering algorithm

	b = 1;
	k = 0;
	for (j = 0; j < m; j++) {
		//MATH

		float cos_val = cosValues[0];
		float sine_val = sinValues[0];

		int new_k = (k * half_n) / b;

		int n_divide_b = n / b;
		for (i = 0; i < n; i++) {
			if (i % 2 == 0) {
				if (i % (n_divide_b) == 0 && i != 0) {
					k++;
					new_k = (k * half_n) / b;
				}

				cos_val = cosValues[new_k];
				sine_val = sinValues[new_k];

				real = mult_real(q[i + 1], w[i + 1], cos_val, sine_val);
				imagine = mult_im(q[i + 1], w[i + 1], cos_val, sine_val);
				new_[i] = q[i] + real;
				new_im[i] = w[i] + imagine;
				new_[i + 1] = q[i] - real;
				new_im[i + 1] = w[i] - imagine;
			}
			q[i] = new_[i];
			w[i] = new_im[i];
		}
		//END MATH

		//REORDER
		for (i = 0; i < n; i++) {
			if (i < half_n) {
				new_[i] = q[2 * i];
				new_[i + half_n] = q[2 * i + 1];
				new_im[i] = w[2 * i];
				new_im[i + half_n] = w[2 * i + 1];
			}
			q[i] = new_[i];
			w[i] = new_im[i];
		}
		//END REORDER
		b *= 2;
		k = 0;
	}

	//find magnitudes
	max = 0;
	place = 1;
	for (i = 1; i < half_n; i++) {
		new_[i] = q[i] * q[i] + w[i] * w[i];
		if (max < new_[i]) {
			max = new_[i];
			place = i;
		}
	}

	float s = sample_f / n; //spacing of bins

	frequency = s * place;

	//curve fitting for more accuarcy
	//assumes parabolic shape and uses three point to find the shift in the parabola
	//using the equation y=A(x-x0)^2+C
	float y1 = new_[place - 1], y2 = new_[place], y3 = new_[place + 1];
	float x0 = s + (2 * s * (y2 - y1)) / (2 * y2 - y1 - y3);
	x0 = x0 / s - 1;

	if (x0 < 0 || x0 > 2) { //error
		return 0;
	}
	if (x0 <= 1) {
		frequency = frequency - (1 - x0) * s;
	} else {
		frequency = frequency + (x0 - 1) * s;
	}

	return frequency;
}
