/*
 * Copyright (c) 2009-2012 Xilinx, Inc.  All rights reserved.
 *
 * Xilinx, Inc.
 * XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" AS A
 * COURTESY TO YOU.  BY PROVIDING THIS DESIGN, CODE, OR INFORMATION AS
 * ONE POSSIBLE   IMPLEMENTATION OF THIS FEATURE, APPLICATION OR
 * STANDARD, XILINX IS MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION
 * IS FREE FROM ANY CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE
 * FOR OBTAINING ANY RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.
 * XILINX EXPRESSLY DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO
 * THE ADEQUACY OF THE IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO
 * ANY WARRANTIES OR REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE
 * FROM CLAIMS OF INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE.
 *
 */

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include <mb_interface.h>

#include "xparameters.h"
#include <xil_types.h>
#include <xil_assert.h>

#include <xio.h>
#include "xtmrctr.h"
#include "fft.h"
#include "note.h"
#include "stream_grabber.h"

#include "xintc.h"


#define SAMPLES 1024 // AXI4 Streaming Data FIFO has size 512
#define M 10 //2^m=samples
#define CLOCK 100000000.0 //clock speed
#define DECIMATED_SAMPLES SAMPLES/4
#define DECIMATED_M M-2

int int_buffer[DECIMATED_SAMPLES];
static float q[DECIMATED_SAMPLES];
static float w[DECIMATED_SAMPLES];

//void print(char *str);

void read_fsl_values(float* q, int n) { //we always want to put 512 into q
	stream_grabber_start();
	stream_grabber_wait_enough_samples(SAMPLES);
	insert_to_q(n);
}

void insert_to_q(int n) {
	int i;
	int decimated_index = 0;
	for (i = 0; i < n; i += 4) { //taking every 4 samples from our SAMPLES to decimate by 4
		int_buffer[decimated_index] = stream_grabber_read_sample(i); //int_buffer and q will have SAMPLES/4 size
		// xil_printf("%d\n",int_buffer[i]);
		//		x = int_buffer[i];
		//		q[i] = 3.3 * x / 67108864.0; // 3.3V and 2^26 bit precision.
		q[decimated_index] = .00000004917383193969726562510
				* int_buffer[decimated_index];
		decimated_index++;
	}
}

static XTmrCtr timer0;
static XIntc intc;
uint32_t a;
XStatus status;
int countFFT = 0;
int countQBuffer = 0;

void timer0Handler() {
	//xil_printf("timer0Handler\n");

	asm("add %0,r0,r14" :" = r"(a));
	//xil_printf("a = %x\r\n", a);

	if (a <= 0x2aa8 && a >= 0x21d4)
	{
		countFFT++;
	}

	else if(a <= 0x3108 && a >= 0x3054 )
	{
		countQBuffer++;
	}
	XTmrCtr_Reset(&timer0, 0);
	XTmrCtr_Start(&timer0, 0);
}

int main() {
	xil_printf("main\r\n");
	float sample_f;
	int l;
	int ticks; //used for timer
	uint32_t Control;
	float frequency;
	float tot_time; //time to run program
	init_platform();


	int initial = 1;

	XTmrCtr timer;
	XTmrCtr_Initialize(&timer, XPAR_AXI_TIMER_1_DEVICE_ID);
	Control = XTmrCtr_GetOptions(&timer,
			1) | XTC_CAPTURE_MODE_OPTION | XTC_INT_MODE_OPTION;
	XTmrCtr_SetOptions(&timer, 1, Control);

	// intc
	status = XIntc_Initialize(&intc, XPAR_MICROBLAZE_0_AXI_INTC_DEVICE_ID);
	if (status != XST_SUCCESS) {
		xil_printf("Error initializing intc\n");
		return XST_FAILURE;
	}

	// timer0
	status = XTmrCtr_Initialize(&timer0, XPAR_AXI_TIMER_0_DEVICE_ID);
	if (status != XST_SUCCESS) {
		xil_printf("Error initializing timer0\n");
		return XST_FAILURE;
	}

	// timer0Handler
	status = XIntc_Connect(&intc,
	XPAR_MICROBLAZE_0_AXI_INTC_AXI_TIMER_0_INTERRUPT_INTR,
			(XInterruptHandler) timer0Handler, &timer0);
	if (status != XST_SUCCESS) {
		xil_printf("Error initializing timer0Hanlder\n");
		return XST_FAILURE;
	}

	status = XIntc_Start(&intc, XIN_REAL_MODE);
	if (status != XST_SUCCESS) {
		xil_printf("Error starting intc\n");
		return XST_FAILURE;
	}

	// timer0
	XIntc_Enable(&intc,
	XPAR_MICROBLAZE_0_AXI_INTC_AXI_TIMER_0_INTERRUPT_INTR);

	// timer0
	XTmrCtr_SetOptions(&timer0, 0,
	XTC_INT_MODE_OPTION | XTC_DOWN_COUNT_OPTION);
	XTmrCtr_SetResetValue(&timer0, 0, 0x186A0);	// 1ms

	microblaze_enable_interrupts();

	print("Hello World\r\n");

	print("Calculating and saving cosine and sin\r\n");

	fillInBuffers(DECIMATED_SAMPLES); //put in after decimation = samples/4

	print("done\r\n");

	XTmrCtr_Start(&timer0, 0);
	while (1) {

		XTmrCtr_Start(&timer, 1);

		//Read Values from Microblaze buffer, which is continuously populated by AXI4 Streaming Data FIFO.

		if (initial == 1) {
			read_fsl_values(q, SAMPLES);
			initial = 0;
		}
		stream_grabber_wait_enough_samples(SAMPLES);
		stream_grabber_start();

		sample_f = 100000000 / 2048.0 / 4;
		//xil_printf("sample frequency: %d \r\n",(int)sample_f);

		//zero w array
		for (l = 0; l < DECIMATED_SAMPLES; l++)
			w[l] = 0;

		frequency = fft(q, w, DECIMATED_SAMPLES, DECIMATED_M, sample_f); //samples input should be decimated here

		insert_to_q(SAMPLES);
		findNote(frequency);
		//get time to run program
		XTmrCtr_Stop(&timer, 1);
		ticks = XTmrCtr_GetValue(&timer, 1);
		tot_time = ticks / CLOCK;
		xil_printf("program time: %dms \r\n", (int) (1000 * tot_time));

		//ignore noise below set frequency
		//if(frequency > 200.0) {
		xil_printf("frequency: %d Hz\r\n", (int) (frequency + .5));


		xil_printf("countFFT = %i\r\n", countFFT);
		xil_printf("countQBuffer = %i\r\n", countQBuffer);
		countFFT =  countQBuffer = 0;
	}

	return 0;
}
